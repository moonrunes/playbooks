---
- name: Build Arch server
  hosts: archserver
  tasks:
  - name: Create group for ssh users
    tags:
    - init
    - user
    become: true
    ansible.builtin.group:
      name: sshusers

  - name: Add nick to groups
    tags:
    - init
    - user
    become: true
    ansible.builtin.user:
      name: nick
      groups: "sshusers, wheel"
      shell: /bin/bash

  - name: Add authorized keys file
    tags:
    - init
    - ssh
    ansible.builtin.copy:
      remote_src: true
      src: /home/nick/Scrimps/config/authorized_keys
      dest: /home/nick/.ssh/
      mode: '0660'
      force: true

  - name: Update and upgrade
    tags:
    - update
    become: true
    community.general.pacman:
      update_cache: true
      upgrade: true

  - name: Install programs via pacman
    tags:
    - init
    - packages
    become: true
    community.general.pacman:
      name:
        - audit
        - btop
        - clamav
        - docker
        - docker-compose
        - firewalld
        - git
        - lynis
        - nano
        - neofetch
        - ntp
        - opendoas
        - parted
        - ranger
        - rkhunter
        - rng-tools
        - rsync
        - tailscale
        - tmux
      state: present

  - name: Set doas permission for nick
    tags:
    - init
    - user
    become: true
    ansible.builtin.lineinfile:
      create: true
      path: /etc/doas.conf
      line: permit persist nick
      owner: root
      group: root
      mode: '0440'

  - name: Download bash_aliases
    tags:
    - init
    - bash
    ansible.builtin.copy:
      remote_src: true
      src: /home/nick/Scrimps/config/.bash_aliases
      dest: /home/nick/
      mode: '0660'
      force: true

  - name: Download bashrc
    tags:
    - init
    - bash
    ansible.builtin.copy:
      remote_src: true
      src: /home/nick/Scrimps/config/.bashrc
      dest: /home/nick/
      mode: '0660'
      force: true

  - name: Lock root account
    tags:
    - init
    - user
    become: true
    become_method: doas
    ansible.builtin.user:
      name: root
      password_lock: true

  - name: Remove unnecessary programs via pacman
    tags:
    - init
    - packages
    become: true
    become_method: doas
    community.general.pacman:
      name:
        - sudo
      state: absent
      force: true

  - name: Secure SSH configuration
    - init
    - ssh
    become: true
    become_method: doas
    ansible.builtin.copy:
      backup: true
      remote_src: true
      src: ./config/sshd_config
      dest: /etc/ssh/sshd_config
      force: true

  - name: Remove short diffie diffie-hellman
    tags:
    - init
    - ssh
    become: true
    become_method: doas
    ansible.builtin.shell: awk '$5 >= 3071' /etc/ssh/moduli > /etc/ssh/moduli.tmp && mv /etc/ssh/moduli.tmp /etc/ssh/moduli

  - name: Restart sshd
    tags:
    - restart
    - ssh
    become: true
    become_method: doas
    ansible.builtin.service:
      name: sshd
      state: restarted
      enabled: true

  - name: Download auditd best practice rules
    - init
    - audit
    become: true
    become_method: doas
    ansible.builtin.get_url:
      url: https://raw.githubusercontent.com/Neo23x0/auditd/master/audit.rules
      dest: /etc/audit/rules.d/
      mode: '0440'
      backup: true

  - name: Restart auditd
    tags:
    - restart
    - audit
    become: true
    become_method: doas
    ansible.builtin.service:
      name: auditd
      state: started
      enabled: true

  - name: Configure rkhunter
    tags:
    - init
    - rkhunter
    become: true
    become_method: doas
    ansible.builtin.lineinfile:
      create: true
      dest: /etc/rkhunter.conf.local
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
    loop:
      - { regexp: '^UPDATE_MIRRORS', line: 'UPDATE_MIRRORS=1' }
      - { regexp: '^MIRRORS_MODE', line: 'MIRRORS_MODE=0'}
      - { regexp: '^COPY_LOG_ON_ERROR', line: 'COPY_LOG_ON_ERROR=1'}
      - { regexp: '^PHALANX2_DIRTEST', line: 'PHALANX2_DIRTEST=1'}
      - { regexp: '^WEB_CMD', line: 'WEB_CMD=""'}
      - { regexp: '^USE_LOCKING', line: 'USE_LOCKING=1'}
      - { regexp: '^SHOW_SUMMARY_WARNINGS_NUMBER', line: 'SHOW_SUMMARY_WARNINGS_NUMBER=1'}

  - name: Configure rkhunter pt. 2
    tags:
    - init
    - rkhunter
    become: true
    become_method: doas
    ansible.builtin.lineinfile:
      create: true
      dest: /etc/default/rkhunter
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
    loop:
      - { regexp: '^CRON_DAILY_RUN', line: 'CRON_DAILY_RUN="true"' }
      - { regexp: '^CRON_DB_UPDATE', line: 'CRON_DB_UPDATE="true"' }
      - { regexp: '^DB_UPDATE_EMAIL', line: 'DB_UPDATE_EMAIL="false"' }
      - { regexp: '^REPORT_EMAIL', line: 'REPORT_EMAIL="root"' }
      - { regexp: '^APT_AUTOGEN', line: 'APT_AUTOGEN="true"' }
      - { regexp: '^NICE', line: 'NICE="0"' }
      - { regexp: '^RUN_CHECK_ON_BATTERY', line: 'RUN_CHECK_ON_BATTERY="false"' }

  - name: Update rkhunter
    tags:
    - update
    - rkhunter
    become: true
    become_method: doas
    ansible.builtin.shell: |
      rkhunter --update
      rkhunter --propupd

  - name: Update and run first lynis audit
    tags:
    - update
    - lynis
    become: true
    become_method: doas
    ansible.builtin.shell: lynis update info

  - name: Download tmux.conf
    tags:
    - init
    - tmux
    ansible.builtin.copy:
      remote_src: true
      src: /home/nick/Scrimps/config/.tmux.conf
      dest: /home/nick/
      mode: '0660'
      force: true

  - name: Download ssh client config
    tags:
    - init
    - ssh
    ansible.builtin.copy:
      remote_src: true
      src: /home/nick/Scrimps/config/config
      dest: /home/nick/.ssh
      mode: '0660'
      force: true

  - name: Tailscale service setup
    - init
    - tailscale
    become: true
    become_method: doas
    ansible.builtin.service:
      name: tailscaled
      state: started
      enabled: true
